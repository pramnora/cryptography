Each alphabet letter can be numbered from 1 up to 26: A=1,B=2,...,Z=26.
-(NOTE: There is no zero.)-

So, it's possible to create a 3 x 3 grid which will store a total of 9 numbers; 
a combination of these numbers can then be used to represent each alphabet letter number.

      A   B   C
  
  1   1   2   3
  
  2   4   5   6
  
  3   7   8   9
  
  So, Paul would be spelled as...
  
  P = 16th letter of the alphabet: row(1),column(A)=1 - row(2),column(C)=6/1A2C
  A = 1st letter of the alphabet: row(1),column(A)=1/1A
  U = 21st letter of the alphabet: row(1),column(B)=2 - row(1),column(A)=1/1B1A
  L = 12th letter of the alphabet: row(1),column(A)=1 - row(1),column(B)=2/1A1B
  
  Thus, we get...
  
  1A2C,1A,1B1A,1A1B
  
  But, there are 2 problems...
  1> What if we wanted to show alphabet numbers: 10(K),20/(T)...if there is no 0?
  2> We could also prefix each single digit number with a 0(in order to make even the length).
  This means we can invent a number representing: 0...as: 00;
  now, this means numbers ending in 0: 10/20, can be represented;
  also, single digit numbers which result in a lengh of 2...can have a length of 4;
  it also means we can get rid of the comma (,) being used as the separator sign.

  P = 16th letter of the alphabet: row(1),column(A)=1 - row(2),column(C)=6/1A2C
  A = 1st letter of the alphabet: single number prefixe with: 00 - row(1),column(A)=1/001A
  U = 21st letter of the alphabet: row(1),column(B)=2 - row(1),column(A)=1/1B1A
  L = 12th letter of the alphabet: row(1),column(A)=1 - row(1),column(B)=2/1A1B
  
  Thus, we get...
  
  1A2C001A1B1A1A1B
  
  -----
  
  There is yet another way to write this grid as: 
  
       7   8   9
       4   5   6
       1   2   3
  
7 4 1   1   2   3
  
8 5 2   4   5   6
  
9 6 3   7   8   9
  
...using this method it's possible to represent any row/column by using a mixture of, at least, 3 digits;
eg. row 1, could be represented as 3 seperate digits: 1,4,7;
    col 1, could be represented as 3 seperate digits: 1,4,7,
    -etc.
    The mathematical formula is: n + 3 + 3 / (1 + 3(=4)) + 3(=7)). Or, you could say: n/n+3/n+6.

  P = 16th letter of the alphabet: row(1+3)=4,column(1+6)=7 - row(2+3)=5,column(3+6)=9/5759
  A = 1st letter of the alphabet: single number prefix with: 00 - row(1+6)=7,column1(1+3)=4/0074
  U = 21st letter of the alphabet: row(1+3)=4,column(2+3)=5 - row(1)=1,column(1+3)=4/7514
  L = 12th letter of the alphabet: row(1+6)=7,column(1)=1 - row(1+3)=4,column(2+6)=8/7148

So, now, we get...    
  
47590075147148

-----

Taking the previous example even further still...; and, using instead a full set of numbers: 0-9; and, also, a full set of alphabet letters: A-Z...

                          X   Y   Z
                          U   V   W
                          R   S   T
                          O   P   Q   
                          L   M   N
                          I   J   K     
                          F   G   H  
                          C   D   E
                          0   A   B
                          7   8   9
                          4   5   6
                          1   2   3
  
X U R O L I F C 0 7 4 1   1   2   3
  
Y V S P M J G D A 8 5 2   4   5   6
  
Z W T Q N K H E B 9 6 3   7   8   9

Now, each row, column has a choice numbers/letters to select from ranging from: 1 to 12 possibilities: Eg. row(1-12),col(1-12). 

  P = 16th letter of the alphabet: row(1)=0,column(1)=R - row(2)=Y,column(3)=Q/0RYQ
  A = 1st letter of the alphabet: single number prefix with: 00 - row(1)=1,column1(1)=I/001I
  U = 21st letter of the alphabet: row(1)=F,column(2)=G - row(1)=4,column(1)=L/FG4L
  L = 12th letter of the alphabet: row(1)=X,column(1)=O - row(1)=C,column(2)=J/XOCJ

So, now, we get...

0RYQ001IFG4LXOCJ

-----

1> RANDOM NOISE 

We could try tossing in some 'random noise' to the above; such as adding the number: 0; 
which, basically, means seeing a single 0 on it's own doesn't mean anything.
 
So, now, we get...    
  
04070590000075010470140800000

...here the only significant 0's are whenever we see a pair of 0's that is also located next to a pair of numbers.

-----

2> RANDOM NOISE 

Starting with example 2 above...

47590075147148

Of course, we could equally have chosen to include all sorts of other random noise, as well; 
such as, letters both uppercase/lowercase; as well as, symbols/-etc.

04Ax@0G70U59K0rT0G0z0m07501047014080q0UT0n0mc000

So, in order to 'decode' the above string; 

1> Take out all the capital letters...  
04Ax@0G70U59K0rT0G0z0m07501047014080q0UT0n0mc000
04x@070590r00z0m07501047014080q00n0mc000

2> Take out all the lower case letters...  
04x@070590r00z0m07501047014080q00n0mc000
04@07059000007501047014080000000

3> Take out all the symbols...  
04@07059000007501047014080000000
0407059000007501047014080000000

4> Take out any zero numbers unless they are 'double zero prefixing a pair of numbers'...
47590075147148

...and, so, we return back to what was our 'original code'.

