Created: 011019 20:31 PM GMT
Updated: 011019 20:31 PM GMT

Here I propose the use of  4 different techniques...

1> Data hiding
2> Split data
3> File distribution
4> Cataloguing

Data hiding technique...

Using Windows OS, the general file naming convention is as follows...

SYNTAX

Filename + seperator dot + filename extension

...or,...

anyfilename.anyfilenameextension

ACTUAL EXAMPLE FILES

x.html
y.txt
z.jpg

NOTE:  Either of these file types can contain 'text'...

> A [.html] file can contain 'hidden' text messages somewhere; possibly, through the use of HTML code comments/or, in the linked to files: [.js]/[.css]/[.json]/[.xml]/-etc.

> A rich text file [.rtf]...which can include colours...can have the writing colour changed to match the background colour...thus, creating 'invisible' text. Or, a plain text file...could simply include text somewhere: end/beginning/middle...which is plain to read; but, 'abstract'?! Or, the text is made to display in such as way...as to make it relatively invisible...extremely 'small' text.

> A [.jpg/.gif/.png] file...could also contain 'hidden' text in there somewhere(again, possibly, code comments could be used which doesn't actually display as picture output).

In short, there are many different ways of including 'hidden' text within files.

SPLIT DATA

Let's say the plain text message is:

This is a secret message.
(completely ignoring any punctuation/or, casing)

We could split up this string into 3 parts...

1st letter | 2nd letter | 3rd letter
 T               h             i
 s               i             s
 a               s             e
 c               r             e
 t               m             e
 s               s             a
 g               e             x
 
 NOTE: If the string itself doesn't exactly divide up into 3...then, we pad the rest of the string using: x's 
 (or, any random letters, if you wish) 

NOTE: It would have been possible to further encode each letter as: written backwards/numbers/binary code/-etc.; 
however, I wish to keep this particular example being as simple and straight forwards as is possible;
therefore, I will not try and use any further encoding methods.

DISTRIBUTED FILES: LOCAL DISTRIBUTION/INTERNET DISTRIBUTION

So, we now get the following code...and, save it into 3 different files...and, each of a different file type:

encoded text - filename

tsactsg - x.html
hisrmse - y.txt
iseeeax - z.jpg

We can further make the file's secret message even more secure by hiding each file in different places on the HDD/Hard Disk Drive.

C:\windows\desktop\html\web pages\x.html
C:\windows\temp\y.txt
C:\windows\pictures\photos\jpg\z.jpg

Now, the difficulties for the 'decoder' is...

1> Which 'type' of file stores the code...? (It might not be quite as obvious as: [.txt])
...and, even, if they did manage to work out...which 'types' of files...
finding just 'one' file would not be enough; instead, they would need to find ALL of the files...
2> How 'many' files are there...?
...even if they were to find out how 'many' files...; that, too, wouldn't be enough...
3> What is the correct file 'order' arrangement...? 
they would also need to know in which particular order the files were written 
in order to successfully be able to join together/and, thus, re-arrange these...
for the message to make any sort of real sense.

A further level of difficulty could be added...by distributing the files all over the internet...
For example...
The [.txt] text file, could be stored somewhere inside of an email box; hidden in amongst 1000+ other emails.
The [.jpg] graphic file, could be stored somewhere inside of Fickr; hidden in amongst 1000+ other picture files.
The [.html] web page file, could be stored somewhere inside of GitHub; hidden in amongst 1000+ other web pages files.
-etc.

Yet, another possibility would be to include files as being a series of 'hidden' email attachments; 
where the main email message made perfect sense...;
but, was regarding an entirely different subject, altogether.
"Hi John, how are you keeping? I enclose an attachment of our latest holiday pic."
...And, it's also possible to use multiple different email providers such has:
iCloud/Hotmail/GMail/Yahoo/Mail.com/-etc.

(NOTE: You could even choose to use just 'one' email...which includes 'mutliple' different file attachments(.txt/.html/.jpg);
       but, then, of course, these files would no longer be 'distributed'; as they remain all in the one same place.)

(NOTE: As well as, files being distributed on the computer, either locally/or, via the internet/one mustn't forget there is also 'real life' distrubution of files offline, as well.)

-----

Taking things to the extreme...

It would be possible to store each letter of a text message...
inside of the message length number of files...so,...

T would be stored in one seperate file
h would be stored in another seperate file
i would be stored in another seperate file
s would be stored in another seperate file
...then, these files could be randomly distributed.

Thus, a hundred letter text message...would lead to both the creation/distribution of 100 files...! 


-----

THE PROBLEM OF EFFECTIVE CATALOGING

The difficulty I can see here is...eventually, the 'encoder' themselves might forget...
> where each file was stored
> what was the exact file order of arrangment
...so, there would have to be a record kept somewhere stating...
> what file is being kept where
> what is the precise file re-arrangement process
...something like...
email service/filename/filetype 
hxhyytgzj 
where...
hxh = email(hotmail)/filename(x)/filetype(.html)
yyt = email(yahoo)/filename(y)/filetype(.txt)
gzj = email(google)/filename(z)/filetype(.jpg)

-----

INSTEAD OF WRITING FILES: JUST USE FILE REFERENCES

Another possiblity I can think of is...instead of using distributed files...;
one could refer to a book...which uses all of the alphabet letters: A-Z;
then, refer to book edition number/date/pub name/author name/book title : page 1/row 2/14 letters across:
1,2,14
...and, so on.

Or, even distributed web page resources: prose/poetry/song/-etc. 
(In this way you don't even need to write any files, yourself; as everything has already been pre-written for you.)

CONCLUSION

So, this discusssion seems to have gone from...

-> Split data
-> Distributed files
-> Distributed file resources
-> Cataloguing stuff

Always, it's necessary to carefully 'catalogue' stuff...; so, that one can easily refer back to it, later.

(Of course, there is many another possiblity I can think of...which I won't even bother to go mention here...
 as I don't wish this file to go on and on for far too long. 
 My real intention here...is not to worry too much about going into exact 'specifics';
 but, rather to discuss just the topic in 'general'.)
 
